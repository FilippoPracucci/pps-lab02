--- 7 ---

def power(base: Double, exponent: Int): Double = exponent match
  case 0 => 1.0
  case _ => base * power(base, exponent - 1)

(power(2, 3), power(5, 2)) // (8.0, 25.0)

def powerTail(base: Double, exponent: Int): Double =
  @annotation.tailrec
  def _power(base: Double, exponent: Int, acc: Double): Double = exponent match
    case 0 => acc
    case _ => _power(base, exponent - 1, base * acc)
  _power(base, exponent, 1.0)

(powerTail(2, 3), powerTail(5, 2)) // (8.0, 25.0)

--- 8 ---

def reverseNumber(n: Int): Int =
  @annotation.tailrec
  def _reverse(n: Int, reversed: Int): Int = n match
    case n if (n / 10 == 0) && (n % 10 == 0) => reversed
    case _ => _reverse(n / 10, reversed * 10 + (n % 10))
  _reverse(n, 0)

println(reverseNumber(12345)) // 54321